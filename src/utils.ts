import { TestData } from "./TestData";
import { TestDatabase } from "./TestDatabase";

export const delay = (seconds: number) =>
  new Promise((resolve) => setTimeout(resolve, seconds * 1000));

export function randomLng() {
  return Math.random() * 360 - 180;
}

export function randomLat() {
  return Math.random() * 180 - 90;
}

export const EPSG3857LatLimit = 85.05112878;

export function randomEPSG3857Lat() {
  return EPSG3857LatLimit * Math.random() * (Math.random() > 0.5 ? 1 : -1);
}

export function isValidEPSG3857Lat(lat: number): boolean {
  return Math.abs(lat) < EPSG3857LatLimit;
}

export type Longitude = number;
export type Latitude = number;

export enum SampleType {
  Random = "random",
  Grid = "grid",
  Cluster = "cluster",
}

function standardizeLng(lng: Longitude) {
  return lng > 180 ? lng - 360 : lng < -180 ? lng + 360 : lng;
}

function standardizeLat(lat: Latitude) {
  return lat > 90 ? lat - 180 : lat < -90 ? lat + 180 : lat;
}

function xyzToLngLat(point: { x: number; y: number; z: number }): {
  lng: number;
  lat: number;
} {
  const lng = Math.atan2(point.y, point.x);
  const lat = Math.atan2(
    point.z,
    Math.sqrt(point.x * point.x + point.y * point.y)
  );
  return { lng: (lng * 180) / Math.PI, lat: (lat * 180) / Math.PI };
}

export function generateSample(
  type: SampleType,
  count: number = 100000
): Array<TestData> {
  switch (type) {
    case SampleType.Random: {
      return Array.from({ length: count }, (_, i) => {
        return {
          id: i.toString(),
          lng: randomLng(),
          lat: randomLat(),
        };
      });
    }
    // Generated by Copilot
    case SampleType.Grid: {
      const phi = Math.PI * (3 - Math.sqrt(5));
      return Array.from({ length: count }, (_, i) => {
        const y = 1 - (i / (count - 1)) * 2; // y goes from 1 to -1
        const radius = Math.sqrt(1 - y * y); // radius at y
        const theta = phi * i; // golden angle increment
        const x = Math.cos(theta) * radius;
        const z = Math.sin(theta) * radius;
        const { lng, lat } = xyzToLngLat({ x, y, z });
        return {
          id: i.toString(),
          lng,
          lat,
        };
      });
    }
    case SampleType.Cluster: {
      const chunkSize = 50;
      let villages = Array.from({ length: count / chunkSize + 1 }, () => {
        return {
          lng: randomLng(),
          lat: randomLat(),
        };
      });
      return Array.from({ length: count }, (_, i) => {
        const baseOffset = 0.0001;
        let offsetLng = baseOffset * (Math.random() - 0.5);
        let offsetLat = baseOffset * (Math.random() - 0.5);
        return {
          id: i.toString(),
          lng: standardizeLng(
            villages[Math.floor(i / chunkSize)].lng + offsetLng
          ),
          lat: standardizeLat(
            villages[Math.floor(i / chunkSize)].lat + offsetLat
          ),
        };
      });
    }
  }
}

export function shuffle<T>(array: Array<T>): Array<T> {
  let currentIndex = array.length;
  let randomIndex: number;

  // While there remain elements to shuffle.
  while (currentIndex != 0) {
    // Pick a remaining element.
    randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex--;

    // And swap it with the current element.
    [array[currentIndex], array[randomIndex]] = [
      array[randomIndex],
      array[currentIndex],
    ];
  }

  return array;
}

export async function importData(
  database: TestDatabase,
  data: Array<TestData>
): ReturnType<typeof database.usageReport> {
  await database.connect();
  await database.cleanup();
  await database.create(data);
  await database.prepare();
  return database.usageReport();
}
